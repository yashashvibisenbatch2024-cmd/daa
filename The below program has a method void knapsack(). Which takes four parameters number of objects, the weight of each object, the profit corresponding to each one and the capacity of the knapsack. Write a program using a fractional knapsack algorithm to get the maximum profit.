# include<stdio.h>
void knapsack(int n, float weight[], float profit[], float capacity) {
      float x[20], totalProfit = 0.0;
    int i;

    // Initialize solution vector x[] = 0
    for (i = 0; i < n; i++) {
        x[i] = 0.0;
    }

    for (i = 0; i < n; i++) {
        if (weight[i] > capacity)
            break;   // Can't take full item
        else {
            x[i] = 1.0;                 // Take full item
            totalProfit += profit[i];

            capacity -= weight[i];  
          }
    }

    // If there is still some capacity left â†’ take fraction of next item
    if (i < n) {
        x[i] = capacity / weight[i];
        totalProfit += x[i] * profit[i];
    }

    printf("Maximum profit is:- %f\n", totalProfit);

  
}

int main() {
	float weight[20], profit[20], capacity;
	int num, i, j;
	float ratio[20], temp;
	printf("Enter the no. of objects: ");
	scanf("%d", &num);
	printf("Enter the weights and profits of each object:\n");
	for (i = 0; i < num; i++) {
		scanf("%f %f", &weight[i], &profit[i]);
	}
	printf("Enter the capacity of knapsack:");
	scanf("%f", &capacity);
	for (i = 0; i < num; i++) {
		ratio[i] = profit[i] / weight[i];
	}

	for (i = 0; i < num; i++) {
		for (j = i + 1; j < num; j++) {
			if (ratio[i] < ratio[j]) {
				temp = ratio[j];
				ratio[j] = ratio[i];
				ratio[i] = temp;
				temp = weight[j];
				weight[j] = weight[i];
				weight[i] = temp;
				temp = profit[j];
				profit[j] = profit[i];
				profit[i] = temp;
			}
		}
	}
	knapsack(num, weight, profit, capacity);
	return(0);
}
